from aiogram import Router, F, exceptions
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database import Admin, Track
from sqlalchemy.future import select
from keyboards.buttons import cancel_button, back_to_menu_button, get_amdin_menu_keyboard, back_admin_menu_keyboard
from handlers.user_handlers import show_user_menu
from middlewares import FileIDState
from functools import wraps
import logging
import asyncio

admin_router = Router()
logger = logging.getLogger(__name__)

MAIN_ADMIN_ID = 0000000000
MAX_TELEGRAM_MESSAGE_LENGTH = 2048  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è

class AddTrackState(StatesGroup):
    collecting_tracks = State()
    editing_track = State()
    adding_admin = State()
    removing_admin = State()
    deleting_track = State()
    replacing_audio = State()
    waiting_for_audio = State()

# –í—Ä–∞–ø–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_only(callback_func):
    @wraps(callback_func)
    async def wrapper(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession, *args, **kwargs):
        if not await is_admin(callback_query.from_user.id, session):
            await callback_query.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return
        return await callback_func(callback_query, state, session, *args, **kwargs)
    return wrapper

async def is_admin(user_id: int, session: AsyncSession):
    if user_id == MAIN_ADMIN_ID:
        return True
    result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
    return result.scalars().first() is not None

@admin_router.message(Command("start"))
async def start_menu(message: Message, session: AsyncSession):
    if await is_admin(message.from_user.id, session):
        await show_admin_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await show_user_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —é–∑–µ—Ä–æ–≤.")

@admin_router.message(Command("menu"))
async def menu_command(message: Message, session: AsyncSession):
    if await is_admin(message.from_user.id, session):
        await show_admin_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await show_user_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —é–∑–µ—Ä–æ–≤.")

async def show_admin_menu(edit_function):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤", switch_inline_query_current_chat=""),
                InlineKeyboardButton(text="üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_search")
            ],
            [
                InlineKeyboardButton(text="ü™™ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_button"),
                InlineKeyboardButton(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_button")
            ],
            [
                InlineKeyboardButton(text="üëÆ –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_menu_button"),
                InlineKeyboardButton(text="üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", callback_data="ai_button")
            ],
            [
                InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help_button"),
            ],
            [
                InlineKeyboardButton(text="ü´∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://boosty.to/mikuplay"),
                InlineKeyboardButton(text="üîó GitHub", url="https://github.com/Pavel8694/mikuplay")
            ],
        ]
    )
    await edit_function('üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —Å–≤–æ–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!*\n\nüëÄ _–¢–∞–∫-—Ç–∞–∫, –ø–æ—Å–º–æ—Ç—Ä–∏–º... –û–≥–æ! –ü–æ—Ö–æ–∂–µ, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–¥–µ—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞. ·ìö·òè·ó¢_\n\nüí¨ *–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π, –æ–±—Ä–∞—â–∞—è—Å—å –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä:* `–ú–∏–∫—É, –ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?` _(–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ò–ò —á–∏—Ç–∞–π—Ç–µ –≤ –º–µ–Ω—é "–ü–æ–º–æ—â—å")_\n\nüíô *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*', reply_markup=keyboard, parse_mode="Markdown")
    
@admin_router.callback_query(F.data == "admin_menu_button")
@admin_only
async def show_admin_menu_button(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"üëÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    await callback_query.message.edit_text('üëÆ *–ê–¥–º–∏–Ω–∫–∞:*', parse_mode="Markdown", reply_markup=get_amdin_menu_keyboard)

@admin_router.callback_query(F.data == "add_tracks")
@admin_only
async def start_add_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"‚è≥ –ù–∞—á–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{callback_query.from_user.username} ({callback_query.from_user.id}).")
    await state.update_data(tracks=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
    await state.set_state(AddTrackState.collecting_tracks)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_tracks")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )
    await callback_query.message.edit_text(
        'üéµ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ* ‚è≠Ô∏è *"–î–∞–ª–µ–µ" –∏–ª–∏* ‚ùå *"–û—Ç–º–µ–Ω–∏—Ç—å".*\n\n_·ìö·òè·ó¢ P. S. –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Ç–∞–∫–∂–µ —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–æ–±–∞–≤–ª—è–µ–º–æ–º—É —Ç—Ä–µ–∫—É.) –∏ —Å –±–∏—Ç—Ä–µ–π—Ç–æ–º –Ω–∏–∂–µ 320–∫–±/—Å —Ç–µ—Ö —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω—ë–º –∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ. –ú–æ—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –æ–±–∏—Ç–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ–¥–ª–∏–Ω–Ω—ã—Ö –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π!\n–ê –≤–æ—Ç —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç–∞–∫ —ç—Ç–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–Ω–æ–≥–æ —Ç—Ä–µ–∫–æ–≤. –°–ø–∞—Å–∏–±–æ! UwU_', 
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data == "confirm_tracks")
@admin_only
async def confirm_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tracks = data.get("tracks", [])

    if not tracks:
        await callback_query.message.edit_text("‚ùå *–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.*", reply_markup=back_to_menu_button, parse_mode="Markdown")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–∫–æ–≤.")
        return

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–î–∞–ª–µ–µ"
    await callback_query.message.edit_text(
        "‚úÖ *–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*",
        parse_mode="Markdown"
    )

    track_info = "\n".join([f"{track.title} - {track.artist}" for track in tracks])
    if len(track_info) > MAX_TELEGRAM_MESSAGE_LENGTH - 500:  # –£—á—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        track_info = track_info[:MAX_TELEGRAM_MESSAGE_LENGTH - 500] + "... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="final_confirm_tracks")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )
    await callback_query.message.answer(
        f'üëá <b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:</b>\n{track_info}\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ ‚ùå –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.</b>\n\n<i>·ìö·òè·ó¢ P. S. –¢—Ä–µ–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö –∑–∞–Ω–æ—Å—è—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —ç–¥–∞–∫–∏–º–∏ "—á–∞–Ω–∫–∞–º–∏" –ø–æ 10 —à—Ç—É–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫–∞–∂–¥—ã–µ 5.5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–∏–ª—å–Ω–æ –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –µ—ë.</i>',
        reply_markup=keyboard, parse_mode="HTML"
    )
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.")

@admin_router.callback_query(F.data == "final_confirm_tracks")
@admin_only
async def final_confirm_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tracks = data.get("tracks", [])
    skipped_tracks = data.get("skipped_tracks", [])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    await callback_query.message.edit_text(
        "‚è≥ *–¢—Ä–µ–∫–∏ –Ω–∞—á–∞–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º.*",
        parse_mode="Markdown"
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤ –±–∞—Ç—á–∞–º–∏
    await process_tracks_in_batches(tracks, session, skipped_tracks, batch_size=10)

    await state.clear()

    if skipped_tracks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏
        skipped_info = "\n".join([f"{track['title']} (–ü—Ä–∏—á–∏–Ω–∞: {track['reason']})" for track in skipped_tracks])
        if len(skipped_info) > MAX_TELEGRAM_MESSAGE_LENGTH - 200:
            skipped_info = skipped_info[:MAX_TELEGRAM_MESSAGE_LENGTH - 200] + "... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        message = (f"ü§î <b>–í—Ä–æ–¥–µ, —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</b>\n\n"
                   f"‚ö†Ô∏è <b>–ö–∞–∫–∏–µ-—Ç–æ —Ç—Ä–µ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ª–∏–±–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è MP3:</b>\n"
                   f"{skipped_info}")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–∫–∏: {skipped_info}")
    else:
        message = "‚úÖ <b>–í—Å–µ —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</b>"
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –¥–æ–±–∞–≤–∏–ª {len(tracks)} —Ç—Ä–µ–∫(–æ–≤).")

    await callback_query.message.answer(message, reply_markup=back_to_menu_button, parse_mode="HTML")

@admin_router.message(F.content_type == ContentType.AUDIO, StateFilter(AddTrackState.collecting_tracks))
async def collect_tracks(message: Message, state: FSMContext):
    audio = message.audio

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    if audio.mime_type != "audio/mpeg":
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {audio.file_name or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è MP3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        data = await state.get_data()
        skipped_tracks = data.get("skipped_tracks", [])
        skipped_tracks.append({"title": audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", "reason": "–Ω–µ MP3"})
        await state.update_data(skipped_tracks=skipped_tracks)
        return

    track_title = audio.title if audio.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    track_artist = audio.performer if audio.performer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    track_file_id = audio.file_id

    track_title_normalized = track_title.lower()
    track_artist_normalized = track_artist.lower()

    track = Track(
        title=track_title,
        artist=track_artist,
        file_id=track_file_id,
        title_lower=track_title_normalized,
        artist_lower=track_artist_normalized
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tracks = data.get("tracks", [])
    tracks.append(track)
    await state.update_data(tracks=tracks)

    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–∫ {track_title} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {track_artist}.")

async def process_tracks_in_batches(tracks, session, skipped_tracks, batch_size=10):
    for i in range(0, len(tracks), batch_size):
        batch = tracks[i:i + batch_size]
        for track in batch:
            try:
                logger.info(f"üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫: {track.title}, ID: {track.file_id}.")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–∫ —Å —Ç–∞–∫–∏–º –∂–µ file_id
                existing_track = await session.execute(select(Track).where(Track.file_id == track.file_id))
                if existing_track.scalars().first():
                    logger.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ —Å file_id {track.file_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
                    skipped_tracks.append({"title": track.title, "reason": "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
                    continue

                # –ï—Å–ª–∏ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–µ—Å—Å–∏—é
                session.add(track)

            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track.title}: {e}")
                skipped_tracks.append({"title": track.title, "reason": f"–æ—à–∏–±–∫–∞: {e}"})
                continue

        try:
            await session.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ {len(batch)} —Ç—Ä–µ–∫–æ–≤.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Ç—Ä–µ–∫–æ–≤: {e}")
            await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞—Ç—á–µ–π
        if i + batch_size < len(tracks):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            await asyncio.sleep(5.5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –≤ 5.5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞—Ç—á–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)
@admin_router.callback_query(F.data == "delete_track")
@admin_only
async def delete_track_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç—Ä–µ–∫–∏.*", parse_mode="Markdown", reply_markup=back_admin_menu_keyboard)
        logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.")
        return

    await state.set_state(AddTrackState.deleting_track)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –∏–∑ –ø–æ–∏—Å–∫–∞).*\n\n_·ìö·òè·ó¢ P. S. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.deleting_track))
async def delete_track(message: Message, session: AsyncSession, state: FSMContext):
    try:
        track_id = int(message.text)
        track_result = await session.execute(select(Track).where(Track.id == track_id))
        track = track_result.scalars().first()
        if track:
            track.file_id = None
            await session.commit()
            await message.reply("‚úÖ *–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç –∏–∑ –ø–æ–∏—Å–∫–∞.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) —Å–∫—Ä—ã–ª —Ç—Ä–µ–∫ —Å ID {track_id}.")
            await state.clear()
        else:
            await message.reply("‚ùå *–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", reply_markup=back_to_menu_button, parse_mode="Markdown")
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è —Å–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫ —Å ID {track_id}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*", reply_markup=back_to_menu_button, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤
@admin_router.callback_query(F.data == "replace_audio")
@admin_only
async def replace_audio_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    # if callback_query.from_user.id != MAIN_ADMIN_ID:
        # await callback_query.message.edit_text(
            # "‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å —Ç—Ä–µ–∫–∏.*",
            # parse_mode="Markdown",
            # reply_markup=back_admin_menu_keyboard
        # )
        # logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤.")
        # return

    await state.set_state(AddTrackState.replacing_audio)
    await callback_query.message.edit_text(
        "üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏. –ü—Ä–∏–º–µ—Ä:* `1 2 3 4 5`\n\n_·ìö·òè·ó¢ P. S. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö ID –∑–∞ –æ–¥–Ω—É –∑–∞–º–µ–Ω—É ‚Äî 50._",
        reply_markup=cancel_button,
        parse_mode="Markdown"
    )
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.replacing_audio))
async def receive_track_ids(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text:
        await message.reply("‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.*", parse_mode="Markdown", reply_markup=cancel_button)
        return

    track_ids = message.text.split()
    if len(track_ids) > 50:
        await message.reply("‚ö†Ô∏è *–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ID. –ú–∞–∫—Å–∏–º—É–º ‚Äî 50 –∑–∞ —Ä–∞–∑.*", parse_mode="Markdown", reply_markup=cancel_button)
        return

    try:
        track_ids = list(map(int, track_ids))
    except ValueError:
        await message.reply("‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ ID —Ç—Ä–µ–∫–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏.*", parse_mode="Markdown", reply_markup=cancel_button)
        return

    tracks_result = await session.execute(select(Track).where(Track.id.in_(track_ids)))
    tracks = tracks_result.scalars().all()

    if not tracks:
        await message.reply("‚ùå *–¢—Ä–µ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*", parse_mode="Markdown", reply_markup=cancel_button)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    track_list = "\n".join([f"üéµ ID: {track.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {track.title}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track.artist}" for track in tracks])
    if len(track_list) > MAX_TELEGRAM_MESSAGE_LENGTH:
        track_list = track_list[:MAX_TELEGRAM_MESSAGE_LENGTH - 50] + "... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

    await state.update_data(track_ids=track_ids, tracks=tracks)
    await state.set_state(AddTrackState.waiting_for_audio)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_replacement")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )

    await message.reply(
        f"üìã <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã:</b>\n\n{track_list}\n\n"
        'üòä <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —á–∏—Å–ª—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ".</b>\n\n<i>·ìö·òè·ó¢ P. S. –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å (–ø–µ—Ä–≤—ã–µ –ø–æ —Å–ø–∏—Å–∫—É, –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑). –ë–æ–ª—å—à–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.</i>',
        parse_mode="HTML",
        reply_markup=keyboard
    )

@admin_router.message(F.content_type == ContentType.AUDIO, StateFilter(AddTrackState.waiting_for_audio))
async def receive_audio_files(message: Message, state: FSMContext):
    data = await state.get_data()
    tracks = data.get("tracks", [])
    received_files = data.get("received_files", [])
    skipped_tracks = data.get("skipped_tracks", [])
    limit_reached_logged = data.get("limit_reached_logged", False)  # –§–ª–∞–≥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Ç—Ä–µ–∫–æ–≤
    if len(received_files) >= len(tracks):
        if not limit_reached_logged:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
            await state.update_data(limit_reached_logged=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.audio.mime_type != "audio/mpeg":
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {message.audio.file_name or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è MP3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        skipped_tracks.append({"title": message.audio.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", "reason": "–Ω–µ MP3"})
        await state.update_data(skipped_tracks=skipped_tracks)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    new_file = {
        "file_id": message.audio.file_id,
        "title": message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        "artist": message.audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    }
    received_files.append(new_file)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(received_files=received_files)

    # –õ–æ–≥–≥–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π —Ñ–∞–π–ª
    logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–∫ {new_file['title']} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {new_file['artist']} –¥–ª—è –∑–∞–º–µ–Ω—ã.")

@admin_router.callback_query(F.data == "confirm_replacement", StateFilter(AddTrackState.waiting_for_audio))
@admin_only
async def confirm_replacement(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tracks = data.get("tracks", [])
    received_files = data.get("received_files", [])
    skipped_tracks = data.get("skipped_tracks", [])

    if len(received_files) != len(tracks):
        await callback_query.message.reply(
            "‚ö†Ô∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —á–∏—Å–ª–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤, –∏–ª–∏ –≤—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏—Ö –≤–æ–≤—Å–µ. –¢–∞–∫–∂–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã —Ñ–∞–π–ª—ã –Ω–µ MP3 —Ñ–æ—Ä–º–∞—Ç–∞, –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–∞.*",
            parse_mode="Markdown",
            reply_markup=cancel_button
        )
        return

    await callback_query.message.edit_text(
        "‚è≥ *–ù–∞—á–∞–ª–∞—Å—å –∑–∞–º–µ–Ω–∞ —Ç—Ä–µ–∫–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º.*",
        parse_mode="Markdown"
    )

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã
        updated_tracks = []
        for track, new_file in zip(tracks, received_files):
            track.title = new_file["title"]
            track.artist = new_file["artist"]
            track.file_id = new_file["file_id"]
            track.title_lower = new_file["title"].lower()
            track.artist_lower = new_file["artist"].lower()
            updated_tracks.append(track)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–∞—Ç—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await update_tracks_in_batches(updated_tracks, session, skipped_tracks)

        if skipped_tracks:
            skipped_info = "\n".join([f"{track['title']} (–ü—Ä–∏—á–∏–Ω–∞: {track['reason']})" for track in skipped_tracks])
            if len(skipped_info) > MAX_TELEGRAM_MESSAGE_LENGTH - 200:
                skipped_info = skipped_info[:MAX_TELEGRAM_MESSAGE_LENGTH - 200] + "... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
            message = (f"ü§î <b>–í—Ä–æ–¥–µ, —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã.</b>\n\n"
                       f"‚ö†Ô∏è <b>–ö–∞–∫–∏–µ-—Ç–æ —Ç—Ä–µ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ª–∏–±–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è MP3:</b>\n"
                       f"{skipped_info}")
        else:
            message = "‚úÖ <b>–í—Å–µ —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã.</b>"

        await callback_query.message.reply(
            message,
            parse_mode="HTML",
            reply_markup=back_to_menu_button
        )
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤ —Å ID {', '.join(map(str, [t.id for t in updated_tracks]))}.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç—Ä–µ–∫–æ–≤: {e}")
        await callback_query.message.reply(
            "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç—Ä–µ–∫–æ–≤.*",
            parse_mode="Markdown",
            reply_markup=back_to_menu_button
        )
    finally:
        await state.clear()

async def update_tracks_in_batches(tracks, session, skipped_tracks, batch_size=10):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ —Å –ø–∞—É–∑–æ–π –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
    """
    for i in range(0, len(tracks), batch_size):
        batch = tracks[i:i + batch_size]
        try:
            for track in batch:
                try:
                    logger.info(f"üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫: {track.title}, ID: {track.file_id}.")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–∫ —Å —Ç–∞–∫–∏–º –∂–µ file_id
                    existing_track = await session.execute(select(Track).where(Track.file_id == track.file_id))
                    if existing_track.scalars().first():
                        logger.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ —Å file_id {track.file_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–º–µ–Ω—É.")
                        skipped_tracks.append({"title": track.title, "reason": "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
                        continue
                    
                    session.add(track)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ —Å–µ—Å—Å–∏—é

                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track.title}: {e}")
                    skipped_tracks.append({"title": track.title, "reason": f"–æ—à–∏–±–∫–∞: {e}"})
                    continue

            await session.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã –∏–∑ {len(batch)} —Ç—Ä–µ–∫–æ–≤.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã —Ç—Ä–µ–∫–æ–≤: {e}")
            await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        if i + batch_size < len(tracks):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É
            await asyncio.sleep(5.5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –≤ 5.5 —Å–µ–∫—É–Ω–¥
        
@admin_router.callback_query(F.data == "edit_track")
@admin_only
async def edit_track_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö.*", parse_mode="Markdown", reply_markup=back_admin_menu_keyboard)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö.")
        return
    
    await state.set_state(AddTrackState.editing_track)
    await callback_query.message.edit_text(
        "üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n`ID`\n`–ù–∞–∑–≤–∞–Ω–∏–µ`\n`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å`\n\n_·ìö·òè·ó¢ P. S. –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –ª–∏—à—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ —Å–∞–º–æ–º MP3 —Ñ–∞–π–ª–µ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–æ—Ç–µ. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._",
        reply_markup=cancel_button,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        parse_mode="Markdown"
    )
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö.")

@admin_router.message(StateFilter(AddTrackState.editing_track))
async def edit_track(message: Message, session: AsyncSession, state: FSMContext):
    try:
        data = message.text.split("\n")
        track_id = int(data[0])
        new_title = data[1]
        new_artist = data[2]

        track_result = await session.execute(select(Track).where(Track.id == track_id))
        track = track_result.scalars().first()
        if track:
            track.title = new_title
            track.artist = new_artist
            track.title_lower = new_title.lower()
            track.artist_lower = new_artist.lower()
            await session.commit()
            await message.reply("‚úÖ *–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å ID {track_id}.")
            await state.clear()
        else:
            await message.reply("‚ùå *–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å ID {track_id}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        
@admin_router.callback_query(F.data == "add_admin")
@admin_only
async def add_admin_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.*", parse_mode="Markdown", reply_markup=back_admin_menu_keyboard)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    await state.set_state(AddTrackState.adding_admin)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.adding_admin))
async def add_admin(message: Message, session: AsyncSession, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        new_admin = Admin(telegram_id=new_admin_id)
        session.add(new_admin)
        await session.commit()
        await message.reply("‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) –¥–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {new_admin_id}.")
        await state.clear()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        
@admin_router.callback_query(F.data == "remove_admin")
@admin_only
async def remove_admin_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.*", parse_mode="Markdown", reply_markup=back_admin_menu_keyboard)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    await state.set_state(AddTrackState.removing_admin)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å.*", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –º–µ–Ω—é —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.removing_admin))
async def remove_admin(message: Message, session: AsyncSession, state: FSMContext):
    try:
        admin_id_to_remove = int(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID
        admin_result = await session.execute(select(Admin).where(Admin.telegram_id == admin_id_to_remove))
        admin = admin_result.scalars().first()

        if admin:
            await session.delete(admin)
            await session.commit()
            await message.reply("‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) —Ä–∞–∑–∂–∞–ª–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_remove}.")
        else:
            await message.reply("‚ùå *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_remove}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
        
        await state.clear()

    except ValueError:
        await message.reply("‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        await state.clear()
        
# –í—ã–≤–æ–¥ ID –ø—Ä–æ—Ñ–∏–ª—è –∏ —á–∞—Ç–∞
@admin_router.callback_query(F.data == "get_ids")
@admin_only
async def get_ids(callback_query: CallbackQuery, state: FSMContext, session: object):
    logger.info(f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ—Ñ–∏–ª—è –∏ —á–∞—Ç–∞.")
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    await callback_query.message.edit_text(
        f"üë§ <b>ID –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:</b> <code>{user_id}</code>\n"
        f"üí¨ <b>ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞:</b> <code>{chat_id}</code>",
        parse_mode="HTML",
        reply_markup=back_admin_menu_keyboard
    )

# –û–∂–∏–¥–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ ID
@admin_router.callback_query(F.data == "get_file_id")
@admin_only
async def wait_for_file(callback_query: CallbackQuery, state: FSMContext, session: object):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å ID —Ñ–∞–π–ª–æ–≤.*", parse_mode="Markdown", reply_markup=back_admin_menu_keyboard)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ–∞–π–ª–æ–≤.")
        return
    
    logger.info(f"üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ–∞–π–ª–æ–≤.")
    await state.set_state(FileIDState.waiting_for_file)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")],
        ]
    )
    
    await callback_query.message.edit_text(
        "üìÇ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª (–∞—É–¥–∏–æ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID:</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ ID
@admin_router.message(StateFilter(FileIDState.waiting_for_file))
async def get_file_id(message: Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ ID
    file_id = None
    file_type = None
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")],
        ]
    )

    if message.audio:
        file_id = message.audio.file_id
        file_type = "üéµ –ê—É–¥–∏–æ"
    elif message.photo:
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_type = "üñºÔ∏è –§–æ—Ç–æ"
    elif message.video:
        file_id = message.video.file_id
        file_type = "üé• –í–∏–¥–µ–æ"
    elif message.document:
        file_id = message.document.file_id
        file_type = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
    elif message.voice:
        file_id = message.voice.file_id
        file_type = "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.animation:
        file_id = message.animation.file_id
        file_type = "üìΩÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è"
    elif message.sticker:
        file_id = message.sticker.file_id
        if message.sticker.is_animated:
            file_type = "üñºÔ∏è –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"
        elif message.sticker.is_video:
            file_type = "üé• –í–∏–¥–µ–æ-—Å—Ç–∏–∫–µ—Ä"
        else:
            file_type = "üìÑ –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"
    else:
        await message.reply("‚ö†Ô∏è <b>–í—ã –ª–∏–±–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –ª–∏–±–æ —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.</b>", parse_mode="HTML", reply_markup=keyboard)
        return

    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ
    logger.info(
        f"üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) "
        f"–ø–æ–ª—É—á–∏–ª ID —Ñ–∞–π–ª–∞. –¢–∏–ø: {file_type}, ID: {file_id}."
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    # –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
    await message.reply(
        f"<b>{file_type} ID:</b> <code>{file_id}</code>",
        parse_mode="HTML",
        reply_markup=back_admin_menu_keyboard
    )
