from aiogram import Router
from aiogram.types import InlineQuery, InlineQueryResultCachedAudio, InlineQueryResultArticle, InputTextMessageContent
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import Track
import logging
import re

inline_router = Router()
logger = logging.getLogger(__name__)

@inline_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery, session: AsyncSession):
    query = inline_query.query.strip().lower()
    
    if query:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        query_words = query.split()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å file_id
        tracks_result = await session.execute(select(Track).where(Track.file_id.isnot(None)))
        all_tracks = tracks_result.scalars().all()
        
        matched_tracks = []
        for track in all_tracks:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å –ª–∏–±–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ª–∏–±–æ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
            matches_all_words = all(
                re.search(re.escape(word), track.title_lower) or re.search(re.escape(word), track.artist_lower)
                for word in query_words
            )
            
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
            if matches_all_words:
                matched_tracks.append(track)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–æ 50
        matched_tracks = matched_tracks[:50]
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å file_id
        matched_tracks = await session.execute(
            select(Track).where(Track.file_id.isnot(None)).order_by(Track.id.desc()).limit(10)
        )
        matched_tracks = matched_tracks.scalars().all()

    results = []
    for track in matched_tracks:
        if track.file_id:
            results.append(
                InlineQueryResultCachedAudio(
                    id=str(track.id),
                    audio_file_id=track.file_id,
                    title=track.title,
                    performer=track.artist,
                    parse_mode="HTML",
                    caption='<b><a href="https://t.me/MikuPlayBot">üíô Provided by MikuPlay</a></b>'
                )
            )
        else:
            logger.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ —Å ID {track.id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id.")
            results.append(
                InlineQueryResultArticle(
                    id=f"error-{track.id}",
                    title=f"‚ö†Ô∏è –¢—Ä–µ–∫ {track.title} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ö†Ô∏è –¢—Ä–µ–∫ {track.title} –æ—Ç {track.artist} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                    )
                )
            )

    if not results:
        await inline_query.answer([], switch_pm_text="‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", switch_pm_parameter="start")
    else:
        await inline_query.answer(results, cache_time=1)
