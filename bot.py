import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from config import API_TOKEN
from database import init_db
from handlers.admin_handlers import admin_router
from handlers.user_handlers import user_router
from handlers.common_handlers import common_router
from handlers.inline_handlers import inline_router
from ai.run import ai_router, auto_clear_old_history, process_queue
from middlewares import DbSessionMiddleware, AntiSpamMiddleware
from logging.handlers import RotatingFileHandler
import logging
import os

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
log_file_path = os.path.join('logs', 'log.txt')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
rotating_handler = RotatingFileHandler(
    log_file_path, 
    maxBytes=2 * 1024 * 1024,  # 2 MB
    backupCount=5,  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤ —Å –ª–æ–≥–∞–º–∏
    encoding='utf-8'
)

# –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
rotating_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ aiogram.event –Ω–∞ —É—Ä–æ–≤–Ω–µ INFO
logging.getLogger('aiogram.event').setLevel(logging.WARNING)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–æ–≥–≥–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
if not logger.hasHandlers():
    logger.addHandler(rotating_handler)
    logger.addHandler(console_handler)

async def main():
    await init_db()
    dp.update.outer_middleware(DbSessionMiddleware())
    dp.message.middleware(AntiSpamMiddleware(limit=110, timeout=3))
    dp.callback_query.middleware(AntiSpamMiddleware(limit=5, timeout=2))
    dp.include_router(admin_router)
    dp.include_router(user_router)
    dp.include_router(common_router)
    dp.include_router(inline_router)
    dp.include_router(ai_router)
    asyncio.create_task(process_queue())
    asyncio.create_task(auto_clear_old_history())
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info(f"‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        await bot.session.close()
        logger.info(f"üò¥ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info(f"üì¥ –ë–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω.")
