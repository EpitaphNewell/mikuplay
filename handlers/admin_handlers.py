from aiogram import Router, F, exceptions
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database import Admin, Track
from sqlalchemy.future import select
from keyboards.buttons import cancel_button, back_to_menu_button
from handlers.user_handlers import show_user_menu
from functools import wraps
import logging
import asyncio

admin_router = Router()
logger = logging.getLogger(__name__)

MAIN_ADMIN_ID = 1331018098

class AddTrackState(StatesGroup):
    collecting_tracks = State()
    editing_track = State()
    adding_admin = State()
    removing_admin = State()
    deleting_track = State()
    replacing_audio = State()
    waiting_for_audio = State()

# –í—Ä–∞–ø–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_only(callback_func):
    @wraps(callback_func)
    async def wrapper(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession, *args, **kwargs):
        if not await is_admin(callback_query.from_user.id, session):
            await callback_query.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return
        return await callback_func(callback_query, state, session, *args, **kwargs)
    return wrapper

async def is_admin(user_id: int, session: AsyncSession):
    if user_id == MAIN_ADMIN_ID:
        return True
    result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
    return result.scalars().first() is not None

@admin_router.message(Command("start"))
async def start_menu(message: Message, session: AsyncSession):
    if await is_admin(message.from_user.id, session):
        await show_admin_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await show_user_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —é–∑–µ—Ä–æ–≤.")

@admin_router.message(Command("menu"))
async def menu_command(message: Message, session: AsyncSession):
    if await is_admin(message.from_user.id, session):
        await show_admin_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await show_user_menu(message.answer)
        logger.info(f"üíô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —é–∑–µ—Ä–æ–≤.")

async def show_admin_menu(edit_function):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéµ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤", switch_inline_query_current_chat=""),
                InlineKeyboardButton(text="üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", callback_data="ai_button")
            ],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏", callback_data="add_tracks"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫", callback_data="edit_track")
            ],
            [
                InlineKeyboardButton(text="üîÅ –ó–∞–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª", callback_data="replace_audio"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫", callback_data="delete_track")
            ],
            [
                InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin"),
                InlineKeyboardButton(text="ü•µ –†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin")
            ],
            [
                InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help_button"),
                InlineKeyboardButton(text="ü´∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://boosty.to/mikuplay")
            ],
            [
                InlineKeyboardButton(text="üîó GitHub", url="https://github.com/Pavel8694/mikuplay"),
            ],
        ]
    )
    await edit_function('üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —Å–≤–æ–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!*\n\nüëÄ _–¢–∞–∫-—Ç–∞–∫, –ø–æ—Å–º–æ—Ç—Ä–∏–º... –û–≥–æ! –ü–æ—Ö–æ–∂–µ, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–¥–µ—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞. ·ìö·òè·ó¢_\n\nüí¨ *–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π, –æ–±—Ä–∞—â–∞—è—Å—å –ø–æ –∏–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä:* `–ú–∏–∫—É, –ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?` _(–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ò–ò —á–∏—Ç–∞–π—Ç–µ –≤ –º–µ–Ω—é "–ü–æ–º–æ—â—å")_\n\nüíô *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*', reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data == "add_tracks")
@admin_only
async def start_add_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"‚è≥ –ù–∞—á–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{callback_query.from_user.username} ({callback_query.from_user.id}).")
    await state.update_data(tracks=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
    await state.set_state(AddTrackState.collecting_tracks)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_tracks")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )
    await callback_query.message.edit_text(
        'üéµ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ* ‚è≠Ô∏è *"–î–∞–ª–µ–µ" –∏–ª–∏* ‚ùå *"–û—Ç–º–µ–Ω–∏—Ç—å".*\n\n_P. S. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª–µ–µ 20-30 —Ç—Ä–µ–∫–æ–≤ –∑–∞ —Ä–∞–∑ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –º–∞–∫—Å–∏–º—É–º –Ω–∞ 100 —Ç—Ä–µ–∫–∞—Ö –∑–∞ —Ä–∞–∑) –∏ —Ç—Ä–µ–∫–∏, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, —è–ø–æ–Ω—Å–∫–∏–µ/–∫–∏—Ç–∞–π—Å–∫–∏–µ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã. –ü–æ–∏—Å–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–ª—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.\n–ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Ç–∞–∫–∂–µ —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–æ–±–∞–≤–ª—è–µ–º–æ–º—É —Ç—Ä–µ–∫—É.) –∏ —Å –±–∏—Ç—Ä–µ–π—Ç–æ–º –Ω–∏–∂–µ 320–∫–±/—Å —Ç–µ—Ö —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω—ë–º –∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ. –ú–æ—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –æ–±–∏—Ç–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ–¥–ª–∏–Ω–Ω—ã—Ö –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π!\n–ê –≤–æ—Ç —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç–∞–∫ —ç—Ç–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã 5-10 —Å–µ–∫—É–Ω–¥, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–Ω–æ–≥–æ —Ç—Ä–µ–∫–æ–≤. –°–ø–∞—Å–∏–±–æ! UwU_', 
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data == "confirm_tracks")
@admin_only
async def confirm_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tracks = data.get("tracks", [])

    if not tracks:
        await callback_query.message.edit_text("‚ùå *–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.*", reply_markup=back_to_menu_button, parse_mode="Markdown")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–∫–æ–≤.")
        return

    track_info = "\n".join([f"*{track.title}* - _{track.artist}_" for track in tracks])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="final_confirm_tracks")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )
    await callback_query.message.answer(
        f'üëá *–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:*\n{track_info}\n\n‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏* ‚ùå *–æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.*\n\n_P. S. –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –º–Ω–æ–≥–æ —Ç—Ä–µ–∫–æ–≤, –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—Å—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤. –¢—Ä–µ–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö –∑–∞–Ω–æ—Å—è—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —ç–¥–∞–∫–∏–º–∏ "—á–∞–Ω–∫–∞–º–∏" –ø–æ 10 —à—Ç—É–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫–∞–∂–¥—ã–µ 5.5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–∏–ª—å–Ω–æ –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –µ—ë._',
        reply_markup=keyboard, parse_mode="Markdown"
    )
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.")

@admin_router.callback_query(F.data == "final_confirm_tracks")
@admin_only
async def final_confirm_tracks(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tracks = data.get("tracks", [])

    skipped_tracks = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤ –±–∞—Ç—á–∞–º–∏
    await process_tracks_in_batches(tracks, session, skipped_tracks, batch_size=10)

    await state.clear()
    
    if skipped_tracks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏
        skipped_info = "\n".join([f"{track.title}" for track in skipped_tracks])
        message = f"ü§î *–í—Ä–æ–¥–µ, —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.*\n\n‚ö†Ô∏è *–ö–∞–∫–∏–µ-—Ç–æ —Ç—Ä–µ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:*\n_{skipped_info}_"
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏: {skipped_info}")
    else:
        message = "‚úÖ *–í—Å–µ —Ç—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.*"
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –¥–æ–±–∞–≤–∏–ª {len(tracks)} —Ç—Ä–µ–∫(–æ–≤).")

    await callback_query.message.edit_text(message, reply_markup=back_to_menu_button, parse_mode="Markdown")

@admin_router.message(F.content_type == ContentType.AUDIO, StateFilter(AddTrackState.collecting_tracks))
async def collect_tracks(message: Message, state: FSMContext):
    audio = message.audio
    track_title = audio.title if audio.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    track_artist = audio.performer if audio.performer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    track_file_id = audio.file_id

    track_title_normalized = track_title.lower()
    track_artist_normalized = track_artist.lower()

    track = Track(
        title=track_title,
        artist=track_artist,
        file_id=track_file_id,
        title_lower=track_title_normalized,
        artist_lower=track_artist_normalized
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tracks = data.get("tracks", [])
    tracks.append(track)
    await state.update_data(tracks=tracks)

    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–∫ {track_title} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {track_artist}.")
    
async def process_tracks_in_batches(tracks, session, skipped_tracks, batch_size=10):
    for i in range(0, len(tracks), batch_size):
        batch = tracks[i:i + batch_size]
        for track in batch:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–∫ —Å —Ç–∞–∫–∏–º –∂–µ file_id
            existing_track = await session.execute(select(Track).where(Track.file_id == track.file_id))
            if existing_track.scalars().first():
                logger.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫ —Å file_id {track.file_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
                skipped_tracks.append(track)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞

            # –ï—Å–ª–∏ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–µ—Å—Å–∏—é
            session.add(track)
        
        try:
            await session.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–∑ {len(batch)} —Ç—Ä–µ–∫–æ–≤.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
            await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
        await asyncio.sleep(5.5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –≤ 5.5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞—Ç—á–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)
@admin_router.callback_query(F.data == "delete_track")
@admin_only
async def delete_track_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç—Ä–µ–∫–∏.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.")
        return

    await state.set_state(AddTrackState.deleting_track)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –∏–∑ –ø–æ–∏—Å–∫–∞).*\n\n_P. S. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.deleting_track))
async def delete_track(message: Message, session: AsyncSession, state: FSMContext):
    try:
        track_id = int(message.text)
        track_result = await session.execute(select(Track).where(Track.id == track_id))
        track = track_result.scalars().first()
        if track:
            track.file_id = None
            await session.commit()
            await message.reply("‚úÖ *–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç –∏–∑ –ø–æ–∏—Å–∫–∞.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) —Å–∫—Ä—ã–ª —Ç—Ä–µ–∫ —Å ID {track_id}.")
            await state.clear()
        else:
            await message.reply("‚ùå *–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", reply_markup=back_to_menu_button, parse_mode="Markdown")
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è —Å–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫ —Å ID {track_id}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*", reply_markup=back_to_menu_button, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞
@admin_router.callback_query(F.data == "replace_audio")
@admin_only
async def replace_audio_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å —Ç—Ä–µ–∫–∏.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤.")
        return

    await state.set_state(AddTrackState.replacing_audio)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª:*\n\n_P. S. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.replacing_audio))
async def receive_track_id(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text:
        await message.reply("‚ùå *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.*", parse_mode="Markdown", reply_markup=cancel_button)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ ID —Ç—Ä–µ–∫–∞ –Ω–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")
        return

    try:
        track_id = int(message.text)
        await state.update_data(track_id=track_id)
        await state.set_state(AddTrackState.waiting_for_audio)
        await message.reply("üéµ *–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞—É–¥–∏–æ-—Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã.*\n\n_P. S. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º._", reply_markup=cancel_button, parse_mode="Markdown")
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤–≤—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–∫–∞. –ñ–¥—É –∞—É–¥–∏–æ-—Ñ–∞–π–ª.")
    except ValueError:
        await message.reply("‚ùå *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–∫–∞.*", parse_mode="Markdown", reply_markup=cancel_button)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–∫–∞: {track_id}.")

@admin_router.message(F.content_type == ContentType.AUDIO, StateFilter(AddTrackState.waiting_for_audio))
async def replace_audio(message: Message, session: AsyncSession, state: FSMContext):
    try:
        data = await state.get_data()
        track_id = data.get("track_id")

        if track_id is None:
            await message.reply("‚ùå *–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç—Ä–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.*", parse_mode="Markdown", reply_markup=cancel_button)
            logger.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: "–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç—Ä–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.".')
            await state.clear()
            return

        track_result = await session.execute(select(Track).where(Track.id == track_id))
        track = track_result.scalars().first()

        if track:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞
            track_title = message.audio.title if message.audio.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            track_artist = message.audio.performer if message.audio.performer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            track_file_id = message.audio.file_id

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track.title = track_title
            track.artist = track_artist
            track.file_id = track_file_id
            track.title_lower = track_title.lower()
            track.artist_lower = track_artist.lower()

            await session.commit()
            await message.reply("‚úÖ *–ê—É–¥–∏–æ-—Ñ–∞–π–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) –∑–∞–º–µ–Ω–∏–ª —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç—Ä–µ–∫–∞ —Å ID {track_id}.")
            await state.clear()
        else:
            await message.reply("‚ùå *–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown", reply_markup=cancel_button)
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ–∫–∞ —Å ID {track_id}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
            await state.clear()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        await state.clear()
        
@admin_router.callback_query(F.data == "edit_track")
@admin_only
async def edit_track_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö.")
        return
    
    await state.set_state(AddTrackState.editing_track)
    await callback_query.message.edit_text(
        "üÜî *–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n`ID`\n`–ù–∞–∑–≤–∞–Ω–∏–µ`\n`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å`\n\n_P. S. –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –ª–∏—à—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ —Å–∞–º–æ–º MP3 —Ñ–∞–π–ª–µ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–æ—Ç–µ. –£–∑–Ω–∞—Ç—å ID –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ç—Ä–µ–∫–∞ –º–æ–∂–Ω–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._",
        reply_markup=cancel_button,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        parse_mode="Markdown"
    )
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö.")

@admin_router.message(StateFilter(AddTrackState.editing_track))
async def edit_track(message: Message, session: AsyncSession, state: FSMContext):
    try:
        data = message.text.split("\n")
        track_id = int(data[0])
        new_title = data[1]
        new_artist = data[2]

        track_result = await session.execute(select(Track).where(Track.id == track_id))
        track = track_result.scalars().first()
        if track:
            track.title = new_title
            track.artist = new_artist
            track.title_lower = new_title.lower()
            track.artist_lower = new_artist.lower()
            await session.commit()
            await message.reply("‚úÖ *–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å ID {track_id}.")
            await state.clear()
        else:
            await message.reply("‚ùå *–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å ID {track_id}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        
@admin_router.callback_query(F.data == "add_admin")
@admin_only
async def add_admin_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    await state.set_state(AddTrackState.adding_admin)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.adding_admin))
async def add_admin(message: Message, session: AsyncSession, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        new_admin = Admin(telegram_id=new_admin_id)
        session.add(new_admin)
        await session.commit()
        await message.reply("‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) –¥–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {new_admin_id}.")
        await state.clear()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        
@admin_router.callback_query(F.data == "remove_admin")
@admin_only
async def remove_admin_command(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback_query.from_user.id != MAIN_ADMIN_ID:
        await callback_query.message.edit_text("‚ùå *–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    await state.set_state(AddTrackState.removing_admin)
    await callback_query.message.edit_text("üÜî *–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å.*", reply_markup=cancel_button, parse_mode="Markdown")
    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –º–µ–Ω—é —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@admin_router.message(StateFilter(AddTrackState.removing_admin))
async def remove_admin(message: Message, session: AsyncSession, state: FSMContext):
    try:
        admin_id_to_remove = int(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID
        admin_result = await session.execute(select(Admin).where(Admin.telegram_id == admin_id_to_remove))
        admin = admin_result.scalars().first()

        if admin:
            await session.delete(admin)
            await session.commit()
            await message.reply("‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) —Ä–∞–∑–∂–∞–ª–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_remove}.")
        else:
            await message.reply("‚ùå *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
            logger.info(f"‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id_to_remove}, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.")
        
        await state.clear()

    except ValueError:
        await message.reply("‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.*", parse_mode="Markdown", reply_markup=back_to_menu_button)
        await state.clear()
