from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ai.modules.gemini import generate_gemini_content, initial_context
from collections import defaultdict, deque
from keyboards.buttons import get_ai_settings_keyboard, get_ai_clear_keyboard
import logging
import re
import asyncio
import time

ai_router = Router()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏ "–ú–∏–∫—É" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
miku_pattern = re.compile(r'\b–º–∏–∫—É\b', re.IGNORECASE)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ chat_id –∏ user_id)
message_history = defaultdict(lambda: {"messages": deque(maxlen=20), "cleared": False})
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è time.monotonic()
message_timestamps = defaultdict(time.monotonic)
# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É
message_queue = asyncio.Queue()

def clean_extra_spaces_preserve_formatting(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    """
    return re.sub(r' +', ' ', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
async def process_queue():
    while True:
        message = await message_queue.get()
        await handle_miku_message_internal(message)
        message_queue.task_done()
        await asyncio.sleep(0.1)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∏–º–µ–Ω–∏ "–ú–∏–∫—É" –∏–ª–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º
@ai_router.message(F.text)
async def handle_miku_message(message: Message):
    bot_user = await message.bot.get_me()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–µ–≥–æ ID)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ "–ú–∏–∫—É" –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    if (
        miku_pattern.search(message.text) or 
        (message.reply_to_message and message.reply_to_message.from_user.id == bot_user.id)
    ):
        if message_queue.qsize() < 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            await message_queue.put(message)
        else:
            logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def auto_clear_old_history():
    while True:
        current_time = time.monotonic()
        for user_key, last_activity in list(message_timestamps.items()):
            if current_time - last_activity > 24 * 60 * 60:  # 24 —á–∞—Å–∞
                if user_key in message_history:
                    del message_history[user_key]
                    message_timestamps.pop(user_key, None)
                    logger.info(f"üïí –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_key}.")
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

@ai_router.callback_query(F.data == "ai_button")
async def show_ai_menu(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò.")
    await callback_query.message.edit_text('üß† *–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò.*\n\n'
                                           'üíô *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
                                           parse_mode="Markdown",
                                           reply_markup=get_ai_settings_keyboard
                                           )
    
@ai_router.callback_query(F.data == "ai_info_button")
async def show_ai_info_menu(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} ({callback_query.from_user.id}) –∑–∞—à—ë–ª –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò.")
    await callback_query.message.edit_text('‚ÑπÔ∏è *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ò–ò:*\n'
                                           'üóë *–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é ‚Äî –æ—á–∏—â–∞–µ—Ç –≤–∞—à –¥–∏–∞–ª–æ–≥ —Å –ò–ò.* _(–¢–∞–∫–∂–µ –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò –≤ —Ç–µ—á–µ–Ω–∏–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –±–æ—Ç/—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.)_',
                                           parse_mode="Markdown",
                                           reply_markup=get_ai_clear_keyboard
                                           )
 
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@ai_router.callback_query(F.data == "ai_clear")
async def clear_message_history(callback_query: CallbackQuery, state: FSMContext):
    # logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ò–ò –ø–æ–ª—É—á–µ–Ω–∞.")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    user_key = f"{chat_id}_{user_id}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞: {user_key} –≤ message_history.")
    # logger.info(f"üìã –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ message_history: {message_history}.")
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω–∞
    if user_key in message_history and not message_history[user_key]["cleared"]:
        message_history[user_key]["messages"].clear()
        message_history[user_key]["cleared"] = True
        message_timestamps.pop(user_key, None)  # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        await callback_query.message.edit_text("üóë *–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.*", parse_mode="Markdown", reply_markup=get_ai_clear_keyboard)
        logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback_query.from_user.username} ({user_id}) –≤ —á–∞—Ç–µ {chat_id}.")
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è *–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –ø—É—Å—Ç–∞.*", parse_mode="Markdown", reply_markup=get_ai_clear_keyboard)
        logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback_query.from_user.username} ({user_id}) –≤ —á–∞—Ç–µ {chat_id}.")

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
async def handle_miku_message_internal(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or f"–ê–Ω–æ–Ω–∏–º ({user_id})"
    user_message = message.text.strip()

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ (—á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö)
    user_key = f"{chat_id}_{user_id}"
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏
    if message_history[user_key]["cleared"]:
        message_history[user_key]["cleared"] = False

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    message_history[user_key]["messages"].append(f"{username}: {user_message}")
    message_timestamps[user_key] = time.monotonic()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 20)
    recent_messages = " \n".join(list(message_history[user_key]["messages"])[-20:])
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º initial_context –∏–∑ gemini.py –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–∏—à–µ—Ç —Ç–µ–±–µ: {user_message}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–∏–º (—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–∞–∫—Å–∏–º—É–º 20):\n{recent_messages}\n"
        f"–¢–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {initial_context}\n"
        f"–ú–∏–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º –≤—Å–µ–π –±–µ—Å–µ–¥—ã –∏ –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–±–µ. –í–µ–¥–∏ —Å–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –∫–∞–∫ –ò–ò, –∞ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∏ –∑–∞–ø–æ–º–Ω–∏ ‚Äî —Ç—ã –ú–∏–∫—É –•–∞—Ü—É–Ω—ç, –∞ –Ω–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –∏ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã. –¢–∞–∫–∂–µ –Ω–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –æ–±—ä—ë–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        response = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        response = await generate_gemini_content(context, chat_id, user_id, username)
        if isinstance(response, str):
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ
            response = clean_extra_spaces_preserve_formatting(response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response) > 4096:
                response = response[:4093] + "..."
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ú–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            message_history[user_key]["messages"].append(f"–ú–∏–∫—É, —ç—Ç–æ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç: {response}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            try:
                await message.reply(response, parse_mode="Markdown")
            except Exception as inner_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å Markdown: {inner_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Å Markdown –Ω–µ —É–¥–∞–µ—Ç—Å—è
                await message.reply(response, parse_mode=None)
        else:
            logger.error(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç Gemini API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {response}")
            await message.reply("‚ö†Ô∏è *–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–ª–∏ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.*", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} ({user_id}) –≤ —á–∞—Ç–µ {chat_id}: {e}. –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à—ë–ª –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response}")
        await message.reply("‚ö†Ô∏è *–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–ª–∏ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.*", parse_mode="Markdown")
