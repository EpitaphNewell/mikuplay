from aiogram.dispatcher.middlewares.base import BaseMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from database import SessionLocal
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters.callback_data import CallbackData
import asyncio
import logging
from typing import Dict

logger = logging.getLogger(__name__)

class DbSessionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        async with SessionLocal() as session:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö
            data["session"] = session
            return await handler(event, data)

class AntiSpamMiddleware(BaseMiddleware):
    def __init__(self, limit: int = 110, timeout: int = 3):
        # limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Ä–µ–º—è timeout
        # timeout - –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        super().__init__()
        self.limit = limit
        self.timeout = timeout
        self.user_timestamps: Dict[int, list] = {}

    async def __call__(self, handler, event, data):
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
            current_time = asyncio.get_event_loop().time()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            if user_id in self.user_timestamps:
                timestamps = self.user_timestamps[user_id]
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö timeout
                self.user_timestamps[user_id] = [t for t in timestamps if current_time - t < self.timeout]
                self.user_timestamps[user_id].append(current_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(self.user_timestamps[user_id]) > self.limit:
                    logger.info(f"ü§° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–æ—É–Ω–∞ {self.timeout} —Å–µ–∫—É–Ω–¥(—ã).")
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
                self.user_timestamps[user_id] = [current_time]
                
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CallbackData
class SearchCallbackData(CallbackData, prefix="search"):
    query: str
    page: int
    
class SearchState(StatesGroup):
    waiting_for_query = State()
    
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
class FileIDState(StatesGroup):
    waiting_for_file = State()
